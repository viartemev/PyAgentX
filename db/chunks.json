[
    {
        "text": "Testing Guidelines\n1. Test Structure: Arrange-Act-Assert (AAA)\nAll tests should follow the AAA pattern for clarity and readability.\nArrange: Prepare all necessary data and mocks.\nAct: Call the function or method being tested.\nAssert: Check that the result meets expectations.\n```python def test_user_creation(): # Arrange user_data = {\"username\": \"test\", \"email\": \"test@example.com\"} mock_db = MagicMock()\n# Act\ncreated_user = create_user(db=mock_db, data=user_data)",
        "source": "testing_guidelines.md",
        "metadata": {
            "tags": [],
            "full_path": "knowledge/testing_guidelines.md",
            "chunk_id": "testing_guidelines.md_0"
        }
    },
    {
        "text": "# Assert\nassert created_user.username == user_data[\"username\"]\nmock_db.add.assert_called_once()\n```\n2. Test Naming\nTest function names should be descriptive and start with test_. Follow the format test_<what_is_tested>_<under_what_conditions>_<expected_result>.\nExample: test_add_items_with_negative_quantity_raises_error()\n3. Use pytest.raises for Exception Testing\nTo verify that code correctly raises exceptions, use the pytest.raises context manager.\n```python import pytest\ndef test_divide_by_zero_raises_exception(): with pytest.raises(ZeroDivisionError): divide(10, 0) ```",
        "source": "testing_guidelines.md",
        "metadata": {
            "tags": [],
            "full_path": "knowledge/testing_guidelines.md",
            "chunk_id": "testing_guidelines.md_1"
        }
    },
    {
        "text": "Error Handling Principles\n1. Prefer Specific Exceptions\nAlways catch the most specific exception type possible. Avoid using except Exception: unless absolutely necessary.\nBad: python try: # some code except Exception as e: log.error(\"An error occurred\")\nGood: python try: # some code except FileNotFoundError as e: log.error(f\"File not found: {e}\") except (KeyError, ValueError) as e: log.warning(f\"Data error: {e}\")\n2. Use Custom Exceptions",
        "source": "error_handling.md",
        "metadata": {
            "tags": [],
            "full_path": "knowledge/error_handling.md",
            "chunk_id": "error_handling.md_0"
        }
    },
    {
        "text": "For errors specific to your application's domain logic, create your own exception classes. This makes the code more readable and allows calling code to handle specific failures precisely.\n```python class InsufficientBalanceError(Exception): \"\"\"Exception raised when the account balance is too low.\"\"\" pass\ndef withdraw(amount): if amount > current_balance: raise InsufficientBalanceError(\"Insufficient funds in the account\") ```\n3. Log Errors Correctly\nWhen catching an exception, be sure to log the full information, including the stack trace, to simplify debugging.\n```python import logging",
        "source": "error_handling.md",
        "metadata": {
            "tags": [],
            "full_path": "knowledge/error_handling.md",
            "chunk_id": "error_handling.md_1"
        }
    },
    {
        "text": "try: # ... except Exception as e: logging.error(\"An unexpected error occurred\", exc_info=True)",
        "source": "error_handling.md",
        "metadata": {
            "tags": [],
            "full_path": "knowledge/error_handling.md",
            "chunk_id": "error_handling.md_2"
        }
    },
    {
        "text": "API Design Principles\nResources: Use plural nouns for endpoint naming (e.g., /users, /products).\nHTTP Methods: Use the correct HTTP verbs for actions:\nGET for retrieving data.\nPOST for creating new resources.\nPUT / PATCH for updating.\nDELETE for deleting.\nVersioning: Include the API version in the URL (e.g., /api/v1/users).",
        "source": "api_design.md",
        "metadata": {
            "tags": [],
            "full_path": "knowledge/api_design.md",
            "chunk_id": "api_design.md_0"
        }
    },
    {
        "text": "Python Style Guide\nNaming: Use snake_case for variables and functions. Class names should use CamelCase. Constants should be in UPPER_SNAKE_CASE.\nLine Length: The maximum line length is 99 characters.\nDocstrings: All public modules, functions, classes, and methods must have Google-style docstrings.\nImports: Group imports in the following order: standard library, third-party libraries, local application.\nString Formatting\nf-strings: Always prefer f-strings for formatting instead of str.format() or the % operator.\nGood: user_info = f\"User {user.name} with ID {user.id}\"",
        "source": "python_style_guide.md",
        "metadata": {
            "tags": [],
            "full_path": "knowledge/python_style_guide.md",
            "chunk_id": "python_style_guide.md_0"
        }
    },
    {
        "text": "Bad: user_info = \"User {} with ID {}\".format(user.name, user.id)\nList Comprehensions\nSimplicity: Use list comprehensions to create lists from existing iterables, but only if the logic remains simple and readable. If complex logic or multiple nested loops are required, use a regular for loop.\nGood: squares = [x*x for x in range(10)]\nAvoid (hard to read): complex_list = [x + y for x in range(10) for y in range(5) if x % 2 == 0 if y % 3 == 0]",
        "source": "python_style_guide.md",
        "metadata": {
            "tags": [],
            "full_path": "knowledge/python_style_guide.md",
            "chunk_id": "python_style_guide.md_1"
        }
    },
    {
        "text": "Agent Tool Creation Guide\nThis document outlines the best practices for creating new tool functions that can be used by AI agents in our system.\n1. Tool Function Structure\nEvery tool must be a wrapper around the core logic and accept a single argument of type Dict[str, Any]. This ensures a unified interface for all tools.\n```python\nCorrect\ndef my_tool(input_data: Dict[str, Any]) -> str: #...\nIncorrect\ndef my_tool(param1: str, param2: int) -> str: #... ```\n2. Mandatory Error Handling",
        "source": "tool_creation_guide.md",
        "metadata": {
            "tags": [
                "code-example"
            ],
            "full_path": "knowledge/code-example/tool_creation_guide.md",
            "chunk_id": "tool_creation_guide.md_0"
        }
    },
    {
        "text": "A tool should never crash with an unhandled exception. Always use try-except and return an informative error message as a string.\npython def substring_tool(input_data: Dict[str, Any]) -> str: try: text = input_data['text'] start = input_data['start'] # ... core logic ... return result except KeyError as e: return f\"Error: Missing required key {e} in input_data.\" except Exception as e: return f\"An unexpected error occurred: {e}\"\n3. Detailed Docstrings",
        "source": "tool_creation_guide.md",
        "metadata": {
            "tags": [
                "code-example"
            ],
            "full_path": "knowledge/code-example/tool_creation_guide.md",
            "chunk_id": "tool_creation_guide.md_1"
        }
    },
    {
        "text": "Always write detailed docstrings in Google-style. Describe the function's purpose, all keys in the input_data dictionary, and the return value.\n4. Tool Definition (_tool_def)\nEvery tool must have a corresponding _tool_def definition. This is a dictionary that describes the function's signature for the OpenAI API, allowing the agent to understand how to call your tool.",
        "source": "tool_creation_guide.md",
        "metadata": {
            "tags": [
                "code-example"
            ],
            "full_path": "knowledge/code-example/tool_creation_guide.md",
            "chunk_id": "tool_creation_guide.md_2"
        }
    },
    {
        "text": "python substring_tool_def = { \"type\": \"function\", \"function\": { \"name\": \"substring_tool\", \"description\": \"Extracts a substring from text.\", \"parameters\": { \"type\": \"object\", \"properties\": { \"text\": {\"type\": \"string\", \"description\": \"The source text.\"}, \"start\": {\"type\": \"integer\", \"description\": \"The starting index.\"}, }, \"required\": [\"text\", \"start\"], }, }, }",
        "source": "tool_creation_guide.md",
        "metadata": {
            "tags": [
                "code-example"
            ],
            "full_path": "knowledge/code-example/tool_creation_guide.md",
            "chunk_id": "tool_creation_guide.md_3"
        }
    }
]